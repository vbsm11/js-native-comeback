// eventloop

// console.log('a')
//
// setTimeout(() => {
//     console.log('timeout')
// }, 1000)
//
// console.log('b')
//
// console.log('c')
// порядок срабатывания - 'a', 'b', 'c', 'timeout'


function a() {
    b()
    console.log('a')
}

function b() {
    c()
    console.log('b')
}

function c() {
    console.log('c')
}

a()
// порядок вывода - 'c', 'b', 'a'
// стэк вызова работает по принципу 'последний пришел первый ушел' (так же принцип называется stack, lifo) в случае если, например, одна ф-ция вызывает другую, другая третью и тд
// в js только один стэк выполнения

// a, b, c в данном случае срабатывают по очереди и уходят из стэка сразу
// все асинхронное, в том числе setTimeOut, попадает в очередь(queue) и срабатывает только после того, как освободился stack
// даже если бы в setTimeOut timeOut был бы 0, console.log в нем все равно бы сработал последним, так как все асинхронные операции в js (колбэки, запросы на сервер) после выполнения с помощью web apis отправляются в очередь, а уже из этой очереди в stack вызова



// console.log('a')
//
// setTimeout(() => {
//     console.log('timeout1')
// }, 1000)
//
// setTimeout(() => {
//     console.log('timeout2')
// }, 0)
//
// console.log('b')
// порядок срабатывания - 'a', 'b', 'timeout2', 'timeout1'



// setTimeout(() => {
//     console.log('timeout1')
// }, 1000)
//
// setTimeout(() => {
//     console.log('timeout2')
// }, 1000)
//
// setTimeout(() => {
//     console.log('timeout3')
// }, 1000)
// порядок срабатывания - 'timeout1', 'timeout2', 'timeout3'
// порядок сохраняется, т.к они отправляются на web apis по порядку с разницей в долю секунды

// синхронный код попадает сразу в стэк вызова, весь асинхронный попадает в очередь, чтобы не тормозить страницу/приложение
// существует три основные очереди - macrotasks, rendering и microtasks

// между macrotasks и rendering рендерингу отдается приоритет, задачи из этой очереди выполняются в первую очередь
// макротаски - это обработчики событий (click, focus...), setTimeout, setInterval
// рендеринг - отрисовка стилец на странице, перерендеринг, скролл


// микротаски - это промисы, запросы на сервер
// eventloop будет выполнять очередь с микротасками первой, пока они не закончатся (даже если в процессе выполнения она будет пополняться новыми микротасками)
// за тем будет идти очередь rendering (там в отличие от микротасок пополнение очереди во время выполнения других тасок не приводит к продолжению выполнения этой очереди)

// eventloop обращается к этим очередям только когда стек вызова пуст
// в целом, eventloop - это некий цикл, который следит за всеми этими очередями


